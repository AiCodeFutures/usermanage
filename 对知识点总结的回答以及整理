项目模块使用总结与扩展思考
FastAPI
核心介绍
FastAPI 是一个高性能 Python Web 框架，简化 RESTful API 开发。
知识点清单
•	路由定义：使用装饰器 @app.get、@app.post 等
•	请求/响应模型：Pydantic BaseModel 自动校验
•	异常处理：HTTPException 状态码与错误消息反馈
示例
from fastapi import FastAPI, HTTPException

app = FastAPI()
扩展思考解答
1.	HTTP方法及其用途：
o	GET：获取资源（如查询数据）
o	POST：创建资源（如提交表单）
o	PUT：更新完整资源
o	DELETE：删除资源
o	PATCH：部分更新资源1,3
2.	常用HTTP状态码：
o	200 OK：请求成功
o	201 Created：资源创建成功
o	400 Bad Request：客户端错误
o	404 Not Found：资源不存在
o	500 Internal Server Error：服务器错误1
3.	Pydantic BaseModel的优势：
o	自动数据验证和转换
o	生成OpenAPI/Swagger文档
o	防止无效数据进入业务逻辑
o	支持嵌套模型和复杂类型2
4.	装饰器优点：
o	不修改原函数代码即可扩展功能
o	保持代码简洁
o	实现横切关注点（如认证、日志）3
5.	路由概念：
o	将URL路径映射到处理函数
o	如@app.get("/items/{id}")将/items/123映射到处理函数3
6.	参数获取方式：
o	路径参数：/items/{id} → id: int
o	查询参数：/items?id=123 → id: int
o	请求体：data: ItemModel3
7.	非法数据处理：
o	FastAPI自动返回422状态码和错误详情
o	可通过HTTPException(status_code=400, detail="自定义错误")自定义1
8.	Uvicorn与WSGI区别：
o	ASGI支持异步，WSGI是同步
o	Uvicorn适合FastAPI的异步特性
o	性能更高，尤其对于I/O密集型操作2
9.	HTTPException用法：
10.	raise HTTPException(
11.	    status_code=404,
12.	    detail="Item not found"
13.	)
[1](@ref)
14.	类似框架比较：
o	Flask：同步，更简单
o	Django：全功能但较重
o	FastAPI特色：异步、自动文档、高性能2
Streamlit
核心介绍
快速搭建交互式 Web 界面，专注数据展示与用户交互。
知识点清单
•	页面配置：st.set_page_config
•	布局组件：st.sidebar、st.columns
•	表单交互：st.form、st.form_submit_button
•	基础组件：st.button、st.text_input、st.radio
•	数据展示：st.dataframe、st.markdown
•	页面刷新：st.rerun
示例
import streamlit as st

st.title("用户管理系统")
if st.button("添加用户"):
    st.success("用户已添加！")
SQLite
核心介绍
嵌入式关系型数据库，数据存储在单个文件中，无需独立服务。
知识点清单
•	数据库初始化：检查并创建表结构（CREATE TABLE）
•	连接管理：使用 sqlite3.connect() 获取连接对象
•	事务控制：conn.commit() 提交、conn.rollback() 回滚
•	结果集封装：将查询返回的元组转换为字典或对象
•	参数化查询：使用 ? 占位符防止 SQL 注入
示例
import sqlite3

conn = sqlite3.connect("users.db")
cursor = conn.cursor()
cursor.execute(
    "CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, username TEXT, email TEXT)"
)
conn.commit()
conn.close()
扩展思考解答
1.	嵌入式数据库特点：
o	无独立服务进程
o	数据存储在单一文件
o	Python内置支持，零配置1
2.	连接管理：
o	sqlite3.connect()创建/打开数据库文件
o	连接对象方法：commit(), rollback(), close()1
3.	事务控制：
o	事务是一组原子性SQL操作
o	commit()提交更改
o	rollback()回滚未提交更改1
4.	参数化查询：
o	使用?占位符避免SQL注入
o	比字符串拼接更安全1
5.	结果集转换：
6.	conn.row_factory = sqlite3.Row  # 结果转为字典
7.	cursor.execute("SELECT * FROM users")
8.	rows = cursor.fetchall()
9.	print(rows[0]["username"])
[1](@ref)
Pandas
核心介绍
功能丰富的数据分析与处理库，擅长表格数据操作。
知识点清单
•	DataFrame 构建：pd.DataFrame(users)
•	列操作：重命名 (df.columns = [...])、排序 (df.sort_values()) 与过滤 (df[cond])
•	索引与切片：使用 loc 和 iloc 访问行列
•	处理缺失值：df.dropna()、df.fillna()
•	与 Streamlit 集成：st.dataframe(df) 美化展示
示例
import pandas as pd

users = database.get_all_users()
df = pd.DataFrame(users)
st.dataframe(df)
Uvicorn
核心介绍
轻量级 ASGI 服务器，负责启动并运行 FastAPI 应用。
知识点清单
•	启动参数：--reload（开发自动重载）、--host、--port
•	日志级别：--log-level 设置输出详细程度
•	生产环境：移除 --reload，设置合适的 workers 数量
•	与反向代理：可与 Nginx 或 Traefik 配合部署
示例命令
uvicorn api:app --host 0.0.0.0 --port 8000 --reload

